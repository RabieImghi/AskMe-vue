{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from '../../store';\nexport default {\n  setup() {\n    const router = useRouter();\n    const store = useStore();\n    const errorsTest = ref(false);\n    const emailError = ref(false);\n    const passwordError = ref(false);\n    const email = ref('');\n    const password = ref('');\n    const errorsRequire = ref('');\n    const login = () => {\n      errorsTest.value = false;\n      emailError.value = false;\n      passwordError.value = false;\n      axios.post('http://127.0.0.1:8000/api/login', {\n        email: email.value,\n        password: password.value,\n        role_id: store.role_id\n      }).then(response => {\n        let user = response.data.user;\n        store.storeRole_id(user.role_id);\n        store.setUser(user);\n        store.setToken(response.data.token);\n        if (user.role_id === 2) router.push('/user/');\n        if (user.role_id === 1) router.push('/admin/');\n      }).catch(error => {\n        if (error.response.status === 422) {\n          emailError.value = true;\n          passwordError.value = true;\n          errorsRequire.value = \"Email and password are required\";\n          errorsTest.value = true;\n        }\n        if (error.response.status === 401) {\n          alert('ok3');\n          if (error.response.data.error === 'email') {\n            emailError.value = true;\n            errorsRequire.value = \"Email is invalid or not exist\";\n            errorsTest.value = true;\n          } else emailError.value = false;\n          if (error.response.data.error === 'password') {\n            passwordError.value = true;\n            errorsRequire.value = \"Password is invalid\";\n            errorsTest.value = true;\n          }\n          if (error.response.data.error === 'NotAuthorized') {\n            alert('NotAuthorized');\n          } else passwordError.value = false;\n        }\n      });\n    };\n    return {\n      login,\n      email,\n      password,\n      emailError,\n      passwordError,\n      errorsRequire,\n      errorsTest\n    };\n  },\n  data() {},\n  methods: {\n    togleInputPassword() {\n      let input = document.getElementById('password');\n      let svg = document.querySelector('svg');\n      if (input.type === 'password') {\n        input.type = 'text';\n        svg.style.fill = 'blue';\n      } else {\n        input.type = 'password';\n        svg.style.fill = 'currentColor';\n      }\n    }\n    // login() {\n    //     this.errorsTest = false;\n    //     this.emailErroe= false;\n    //     this.passwordErroe= false;\n    //     axios.post('http://127.0.0.1:8000/api/login', {\n    //         email: this.email,\n    //         password: this.password,\n    //         count: this.count\n    //     }).then(response => {\n    //         // localStorage.setItem('token', response.data.token);\n    //         // localStorage.setItem('token', response.data.user);\n    //         let usre = response.data.user;\n    //         alert(response.data.TEST)\n    //         // this.$router.push('/user/');\n    //     })\n    //     .catch(error => {\n    //         if(error.response.status === 422){\n    //             this.emailErroe = true;\n    //             this.passwordErroe = true;\n    //             this.errorsRequire = \"Email and password are required\";\n    //             this.errorsTest = true;\n    //         }\n    //         if (error.response.status === 401) {\n    //             if(error.response.data.error === 'email'){\n    //                 this.emailErroe = true;\n    //                 this.errorsRequire = \"Email is invalid or not exist\";\n    //                 this.errorsTest = true;\n    //             }else this.emailErroe = false;\n    //             if(error.response.data.error === 'password'){\n    //                 this.passwordErroe = true;\n    //                 this.errorsRequire = \"Password is invalid\";\n    //                 this.errorsTest = true;\n    //             }\n    //             else this.passwordErroe = false;\n    //         }\n    //     });\n    // },\n  }\n};","map":{"version":3,"names":["axios","ref","useRouter","useStore","setup","router","store","errorsTest","emailError","passwordError","email","password","errorsRequire","login","value","post","role_id","then","response","user","data","storeRole_id","setUser","setToken","token","push","catch","error","status","alert","methods","togleInputPassword","input","document","getElementById","svg","querySelector","type","style","fill"],"sources":["C:\\Users\\Youcode\\Desktop\\FLLLROUGE\\vue\\src\\components\\Auth\\AppAuthLogin.vue"],"sourcesContent":["<template>\r\n    <div class=\"d-flex justify-content-center align-items-center\">\r\n        <main>\r\n            <div class=\"logo text-center\">\r\n                <img src=\"../../assets/img/logo3.png\" alt=\"logo\" width=\"300px\">\r\n            </div>\r\n            <div class=\"cardForm shadow p-5 m-3 \">\r\n                <div class=\"alert alert-danger\" v-if=\"errorsTest\" >{{ errorsRequire }}</div>\r\n                <h3 class=\"blueColor text-center\">Login to Your Account</h3>\r\n                <p class=\"text-center text-secondary\">Enter your email & password to login</p>\r\n                <form action=\"\" class=\"d-flex flex-column justify-content-between gap-4\">\r\n                    <label class=\"text-secondary\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <input v-model=\"email\" type=\"email\" :class=\"{ 'is-invalid': emailErroe }\" class=\"form-control\" name=\"email\" placeholder=\"Email ..\">\r\n                            <div class=\"input-group-append cursor-point\">\r\n                                <span class=\"input-group-text\"> \r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" class=\"bi bi-envelope\" viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1zm13 2.383-4.708 2.825L15 11.105zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741M1 11.105l4.708-2.897L1 5.383z\"/>\r\n                                    </svg>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                    <label class=\"text-secondary\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <input v-model=\"password\" type=\"password\" :class=\"{ 'is-invalid': passwordErroe }\" class=\"form-control\" id=\"password\" placeholder=\"Password\">\r\n                            <div class=\"input-group-append cursor-point\">\r\n                                <span class=\"input-group-text\" @click=\"togleInputPassword()\"> \r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" class=\"bi bi-eye\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z\"/>\r\n                                    <path d=\"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0\"/>\r\n                                    </svg>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                    <label class=\"text-secondary\">\r\n                        <input type=\"checkbox\" class=\"form-check-input\"> Remember me\r\n                    </label>\r\n                    <button @click=\"login()\" type=\"button\" class=\"btn btn-primary\">Login</button>\r\n                    <p class=\"text-secondary\">Don't have account? <router-link to=\"/user/auth/register\"  class=\"blueColor no-underline\"> Create an account</router-link></p>\r\n                    <p class=\"text-secondary\">Back to home page? <router-link to=\"/user/\"  class=\"blueColor no-underline\"> Home</router-link></p>\r\n                </form>\r\n            </div>\r\n            {{ this.count }}\r\n            <footer>\r\n                <p class=\"fw-bold text-secondary text-center p-2\">Â© Copyright AskMe. All Rights Reserved <br>\r\n                Designed by Rabie Ait Imghi</p>\r\n            </footer>\r\n        </main>\r\n    </div>\r\n</template>\r\n<style>\r\n    .is-invalid{\r\n        border: 1px solid red;\r\n    }\r\n</style>\r\n<script>\r\nimport axios from 'axios';\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router'\r\nimport { useStore } from '../../store'\r\n    export default{\r\n        setup() {        \r\n            const router = useRouter()\r\n            const store = useStore();\r\n            const errorsTest = ref(false);\r\n            const emailError = ref(false);\r\n            const passwordError = ref(false);\r\n            const email = ref('');\r\n            const password = ref('');\r\n            const errorsRequire = ref('');\r\n\r\n            const login = () => {\r\n            errorsTest.value = false;\r\n            emailError.value = false;\r\n            passwordError.value = false;\r\n            axios.post('http://127.0.0.1:8000/api/login', {\r\n                email: email.value,\r\n                password: password.value,\r\n                role_id: store.role_id\r\n            }).then(response => {\r\n                let user = response.data.user;\r\n                store.storeRole_id(user.role_id); \r\n                store.setUser(user);\r\n                store.setToken(response.data.token);\r\n                \r\n                if(user.role_id === 2) router.push('/user/');\r\n                if(user.role_id === 1) router.push('/admin/');\r\n            })\r\n            .catch(error => {\r\n                if(error.response.status === 422){\r\n                    emailError.value = true;\r\n                    passwordError.value = true;\r\n                    errorsRequire.value = \"Email and password are required\";\r\n                    errorsTest.value = true;\r\n                }\r\n                if (error.response.status === 401) {\r\n                    alert('ok3');\r\n                    if(error.response.data.error === 'email'){\r\n                        emailError.value = true;\r\n                        errorsRequire.value = \"Email is invalid or not exist\";\r\n                        errorsTest.value = true;\r\n                    }else emailError.value = false;\r\n                    if(error.response.data.error === 'password'){\r\n                        passwordError.value = true;\r\n                        errorsRequire.value = \"Password is invalid\";\r\n                        errorsTest.value = true;\r\n                    }\r\n                    if(error.response.data.error === 'NotAuthorized'){\r\n                        alert('NotAuthorized');\r\n                    }\r\n                    \r\n                    else passwordError.value = false;\r\n                }\r\n            });\r\n            }\r\n\r\n            return {\r\n                login,\r\n                email,\r\n                password,\r\n                emailError,\r\n                passwordError,\r\n                errorsRequire,\r\n                errorsTest\r\n            }\r\n        },\r\n        data() {\r\n      \r\n        },\r\n        methods: {\r\n            togleInputPassword(){\r\n                let input = document.getElementById('password');\r\n                let svg = document.querySelector('svg');\r\n                if(input.type === 'password'){\r\n                    input.type = 'text';\r\n                    svg.style.fill = 'blue';\r\n                }else{\r\n                    input.type = 'password';\r\n                    svg.style.fill = 'currentColor';\r\n                }\r\n            },\r\n            // login() {\r\n            //     this.errorsTest = false;\r\n            //     this.emailErroe= false;\r\n            //     this.passwordErroe= false;\r\n            //     axios.post('http://127.0.0.1:8000/api/login', {\r\n            //         email: this.email,\r\n            //         password: this.password,\r\n            //         count: this.count\r\n            //     }).then(response => {\r\n            //         // localStorage.setItem('token', response.data.token);\r\n            //         // localStorage.setItem('token', response.data.user);\r\n            //         let usre = response.data.user;\r\n            //         alert(response.data.TEST)\r\n            //         // this.$router.push('/user/');\r\n            //     })\r\n            //     .catch(error => {\r\n            //         if(error.response.status === 422){\r\n            //             this.emailErroe = true;\r\n            //             this.passwordErroe = true;\r\n            //             this.errorsRequire = \"Email and password are required\";\r\n            //             this.errorsTest = true;\r\n            //         }\r\n            //         if (error.response.status === 401) {\r\n            //             if(error.response.data.error === 'email'){\r\n            //                 this.emailErroe = true;\r\n            //                 this.errorsRequire = \"Email is invalid or not exist\";\r\n            //                 this.errorsTest = true;\r\n            //             }else this.emailErroe = false;\r\n            //             if(error.response.data.error === 'password'){\r\n            //                 this.passwordErroe = true;\r\n            //                 this.errorsRequire = \"Password is invalid\";\r\n            //                 this.errorsTest = true;\r\n            //             }\r\n            //             else this.passwordErroe = false;\r\n            //         }\r\n            //     });\r\n            // },\r\n        }\r\n    }\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}